// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXAggregateTarget section */
		"Zip::ZipPackageTests::ProductTarget" /* ZipPackageTests */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = OBJ_67 /* Build configuration list for PBXAggregateTarget "ZipPackageTests" */;
			buildPhases = (
			);
			dependencies = (
				OBJ_70 /* PBXTargetDependency */,
			);
			name = ZipPackageTests;
			productName = ZipPackageTests;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		OBJ_39 /* ioapi.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_14 /* ioapi.c */; };
		OBJ_40 /* unzip.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_15 /* unzip.c */; };
		OBJ_41 /* zip.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_16 /* zip.c */; };
		OBJ_43 /* Minizip.h in Headers */ = {isa = PBXBuildFile; fileRef = OBJ_18 /* Minizip.h */; settings = {ATTRIBUTES = (Public, ); }; };
		OBJ_44 /* crypt.h in Headers */ = {isa = PBXBuildFile; fileRef = OBJ_19 /* crypt.h */; settings = {ATTRIBUTES = (Public, ); }; };
		OBJ_45 /* zip.h in Headers */ = {isa = PBXBuildFile; fileRef = OBJ_20 /* zip.h */; settings = {ATTRIBUTES = (Public, ); }; };
		OBJ_46 /* unzip.h in Headers */ = {isa = PBXBuildFile; fileRef = OBJ_21 /* unzip.h */; settings = {ATTRIBUTES = (Public, ); }; };
		OBJ_47 /* ioapi.h in Headers */ = {isa = PBXBuildFile; fileRef = OBJ_22 /* ioapi.h */; settings = {ATTRIBUTES = (Public, ); }; };
		OBJ_54 /* QuickZip.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_10 /* QuickZip.swift */; };
		OBJ_55 /* Zip.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_11 /* Zip.swift */; };
		OBJ_56 /* ZipUtilities.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_12 /* ZipUtilities.swift */; };
		OBJ_58 /* Minizip.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = "Zip::Minizip::Product" /* Minizip.framework */; };
		OBJ_65 /* Package.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_6 /* Package.swift */; };
		OBJ_76 /* XCTestManifests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_25 /* XCTestManifests.swift */; };
		OBJ_77 /* ZipTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_26 /* ZipTests.swift */; };
		OBJ_79 /* Zip.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = "Zip::Zip::Product" /* Zip.framework */; };
		OBJ_80 /* Minizip.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = "Zip::Minizip::Product" /* Minizip.framework */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		B1D8611C221B4E8200B0EDB8 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "Zip::Minizip";
			remoteInfo = Minizip;
		};
		B1D8611D221B4E8200B0EDB8 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "Zip::Zip";
			remoteInfo = Zip;
		};
		B1D8611E221B4E8200B0EDB8 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "Zip::Minizip";
			remoteInfo = Minizip;
		};
		B1D8611F221B4E8300B0EDB8 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "Zip::ZipTests";
			remoteInfo = ZipTests;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		OBJ_10 /* QuickZip.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = QuickZip.swift; sourceTree = "<group>"; };
		OBJ_11 /* Zip.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Zip.swift; sourceTree = "<group>"; };
		OBJ_12 /* ZipUtilities.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ZipUtilities.swift; sourceTree = "<group>"; };
		OBJ_14 /* ioapi.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = ioapi.c; sourceTree = "<group>"; };
		OBJ_15 /* unzip.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = unzip.c; sourceTree = "<group>"; };
		OBJ_16 /* zip.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = zip.c; sourceTree = "<group>"; };
		OBJ_18 /* Minizip.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Minizip.h; sourceTree = "<group>"; };
		OBJ_19 /* crypt.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = crypt.h; sourceTree = "<group>"; };
		OBJ_20 /* zip.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = zip.h; sourceTree = "<group>"; };
		OBJ_21 /* unzip.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = unzip.h; sourceTree = "<group>"; };
		OBJ_22 /* ioapi.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ioapi.h; sourceTree = "<group>"; };
		OBJ_25 /* XCTestManifests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = XCTestManifests.swift; sourceTree = "<group>"; };
		OBJ_26 /* ZipTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ZipTests.swift; sourceTree = "<group>"; };
		OBJ_27 /* ZipTests */ = {isa = PBXFileReference; lastKnownFileType = folder; path = ZipTests; sourceTree = SOURCE_ROOT; };
		OBJ_28 /* Zip */ = {isa = PBXFileReference; lastKnownFileType = folder; path = Zip; sourceTree = SOURCE_ROOT; };
		OBJ_29 /* examples */ = {isa = PBXFileReference; lastKnownFileType = folder; path = examples; sourceTree = SOURCE_ROOT; };
		OBJ_6 /* Package.swift */ = {isa = PBXFileReference; explicitFileType = sourcecode.swift; path = Package.swift; sourceTree = "<group>"; };
		"Zip::Minizip::Product" /* Minizip.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; path = Minizip.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		"Zip::Zip::Product" /* Zip.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; path = Zip.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		"Zip::ZipTests::Product" /* ZipTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; path = ZipTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		OBJ_48 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_57 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_58 /* Minizip.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_78 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_79 /* Zip.framework in Frameworks */,
				OBJ_80 /* Minizip.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		OBJ_13 /* Minizip */ = {
			isa = PBXGroup;
			children = (
				OBJ_14 /* ioapi.c */,
				OBJ_15 /* unzip.c */,
				OBJ_16 /* zip.c */,
				OBJ_17 /* include */,
			);
			name = Minizip;
			path = Zip/minizip;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_17 /* include */ = {
			isa = PBXGroup;
			children = (
				OBJ_18 /* Minizip.h */,
				OBJ_19 /* crypt.h */,
				OBJ_20 /* zip.h */,
				OBJ_21 /* unzip.h */,
				OBJ_22 /* ioapi.h */,
			);
			path = include;
			sourceTree = "<group>";
		};
		OBJ_23 /* Tests */ = {
			isa = PBXGroup;
			children = (
				OBJ_24 /* ZipTests */,
			);
			name = Tests;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_24 /* ZipTests */ = {
			isa = PBXGroup;
			children = (
				OBJ_25 /* XCTestManifests.swift */,
				OBJ_26 /* ZipTests.swift */,
			);
			path = ZipTests;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_30 /* Products */ = {
			isa = PBXGroup;
			children = (
				"Zip::ZipTests::Product" /* ZipTests.xctest */,
				"Zip::Zip::Product" /* Zip.framework */,
				"Zip::Minizip::Product" /* Minizip.framework */,
			);
			name = Products;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		OBJ_5 /*  */ = {
			isa = PBXGroup;
			children = (
				OBJ_6 /* Package.swift */,
				OBJ_7 /* Sources */,
				OBJ_23 /* Tests */,
				OBJ_27 /* ZipTests */,
				OBJ_28 /* Zip */,
				OBJ_29 /* examples */,
				OBJ_30 /* Products */,
			);
			name = "";
			sourceTree = "<group>";
		};
		OBJ_7 /* Sources */ = {
			isa = PBXGroup;
			children = (
				OBJ_8 /* CZlib */,
				OBJ_9 /* Zip */,
				OBJ_13 /* Minizip */,
			);
			name = Sources;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_8 /* CZlib */ = {
			isa = PBXGroup;
			children = (
			);
			name = CZlib;
			path = Zip/zlib;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_9 /* Zip */ = {
			isa = PBXGroup;
			children = (
				OBJ_10 /* QuickZip.swift */,
				OBJ_11 /* Zip.swift */,
				OBJ_12 /* ZipUtilities.swift */,
			);
			path = Zip;
			sourceTree = SOURCE_ROOT;
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		OBJ_42 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_43 /* Minizip.h in Headers */,
				OBJ_44 /* crypt.h in Headers */,
				OBJ_45 /* zip.h in Headers */,
				OBJ_46 /* unzip.h in Headers */,
				OBJ_47 /* ioapi.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		"Zip::Minizip" /* Minizip */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_35 /* Build configuration list for PBXNativeTarget "Minizip" */;
			buildPhases = (
				OBJ_38 /* Sources */,
				OBJ_42 /* Headers */,
				OBJ_48 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Minizip;
			productName = Minizip;
			productReference = "Zip::Minizip::Product" /* Minizip.framework */;
			productType = "com.apple.product-type.framework";
		};
		"Zip::SwiftPMPackageDescription" /* ZipPackageDescription */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_61 /* Build configuration list for PBXNativeTarget "ZipPackageDescription" */;
			buildPhases = (
				OBJ_64 /* Sources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = ZipPackageDescription;
			productName = ZipPackageDescription;
			productType = "com.apple.product-type.framework";
		};
		"Zip::Zip" /* Zip */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_50 /* Build configuration list for PBXNativeTarget "Zip" */;
			buildPhases = (
				OBJ_53 /* Sources */,
				OBJ_57 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				OBJ_59 /* PBXTargetDependency */,
			);
			name = Zip;
			productName = Zip;
			productReference = "Zip::Zip::Product" /* Zip.framework */;
			productType = "com.apple.product-type.framework";
		};
		"Zip::ZipTests" /* ZipTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_72 /* Build configuration list for PBXNativeTarget "ZipTests" */;
			buildPhases = (
				OBJ_75 /* Sources */,
				OBJ_78 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				OBJ_81 /* PBXTargetDependency */,
				OBJ_82 /* PBXTargetDependency */,
			);
			name = ZipTests;
			productName = ZipTests;
			productReference = "Zip::ZipTests::Product" /* ZipTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		OBJ_1 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1010;
			};
			buildConfigurationList = OBJ_2 /* Build configuration list for PBXProject "Zip" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = OBJ_5 /*  */;
			productRefGroup = OBJ_30 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				"Zip::Minizip" /* Minizip */,
				"Zip::Zip" /* Zip */,
				"Zip::SwiftPMPackageDescription" /* ZipPackageDescription */,
				"Zip::ZipPackageTests::ProductTarget" /* ZipPackageTests */,
				"Zip::ZipTests" /* ZipTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		OBJ_38 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_39 /* ioapi.c in Sources */,
				OBJ_40 /* unzip.c in Sources */,
				OBJ_41 /* zip.c in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_53 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_54 /* QuickZip.swift in Sources */,
				OBJ_55 /* Zip.swift in Sources */,
				OBJ_56 /* ZipUtilities.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_64 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_65 /* Package.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_75 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_76 /* XCTestManifests.swift in Sources */,
				OBJ_77 /* ZipTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		OBJ_59 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "Zip::Minizip" /* Minizip */;
			targetProxy = B1D8611C221B4E8200B0EDB8 /* PBXContainerItemProxy */;
		};
		OBJ_70 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "Zip::ZipTests" /* ZipTests */;
			targetProxy = B1D8611F221B4E8300B0EDB8 /* PBXContainerItemProxy */;
		};
		OBJ_81 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "Zip::Zip" /* Zip */;
			targetProxy = B1D8611D221B4E8200B0EDB8 /* PBXContainerItemProxy */;
		};
		OBJ_82 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "Zip::Minizip" /* Minizip */;
			targetProxy = B1D8611E221B4E8200B0EDB8 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin XCBuildConfiguration section */
		OBJ_3 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COMBINE_HIDPI_IMAGES = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				DYLIB_INSTALL_NAME_BASE = "@rpath";
				ENABLE_NS_ASSERTIONS = YES;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				ONLY_ACTIVE_ARCH = YES;
				OTHER_SWIFT_FLAGS = "-DXcode";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = macosx;
				SUPPORTED_PLATFORMS = "macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "SWIFT_PACKAGE DEBUG";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				USE_HEADERMAP = NO;
			};
			name = Debug;
		};
		OBJ_36 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_MODULES = YES;
				DEFINES_MODULE = YES;
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Zip/minizip/include",
					"$(SRCROOT)/Zip/zlib",
				);
				INFOPLIST_FILE = Zip.xcodeproj/Minizip_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) $(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_CFLAGS = "$(inherited)";
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-lz",
				);
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = Minizip;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "$(inherited)";
				TARGET_NAME = Minizip;
			};
			name = Debug;
		};
		OBJ_37 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_MODULES = YES;
				DEFINES_MODULE = YES;
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Zip/minizip/include",
					"$(SRCROOT)/Zip/zlib",
				);
				INFOPLIST_FILE = Zip.xcodeproj/Minizip_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) $(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_CFLAGS = "$(inherited)";
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-lz",
				);
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = Minizip;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "$(inherited)";
				TARGET_NAME = Minizip;
			};
			name = Release;
		};
		OBJ_4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COMBINE_HIDPI_IMAGES = YES;
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				DYLIB_INSTALL_NAME_BASE = "@rpath";
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = s;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				OTHER_SWIFT_FLAGS = "-DXcode";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = macosx;
				SUPPORTED_PLATFORMS = "macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE;
				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
				USE_HEADERMAP = NO;
			};
			name = Release;
		};
		OBJ_51 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Zip/minizip/include",
					"$(SRCROOT)/Zip/zlib",
				);
				INFOPLIST_FILE = Zip.xcodeproj/Zip_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) $(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_CFLAGS = "$(inherited)";
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-lz",
				);
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = Zip;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "$(inherited)";
				SWIFT_VERSION = 4.2;
				TARGET_NAME = Zip;
			};
			name = Debug;
		};
		OBJ_52 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Zip/minizip/include",
					"$(SRCROOT)/Zip/zlib",
				);
				INFOPLIST_FILE = Zip.xcodeproj/Zip_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) $(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_CFLAGS = "$(inherited)";
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-lz",
				);
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = Zip;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "$(inherited)";
				SWIFT_VERSION = 4.2;
				TARGET_NAME = Zip;
			};
			name = Release;
		};
		OBJ_62 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				LD = /usr/bin/true;
				OTHER_SWIFT_FLAGS = "-swift-version 4.2 -I $(TOOLCHAIN_DIR)/usr/lib/swift/pm/4_2 -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk";
				SWIFT_VERSION = 4.2;
			};
			name = Debug;
		};
		OBJ_63 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				LD = /usr/bin/true;
				OTHER_SWIFT_FLAGS = "-swift-version 4.2 -I $(TOOLCHAIN_DIR)/usr/lib/swift/pm/4_2 -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk";
				SWIFT_VERSION = 4.2;
			};
			name = Release;
		};
		OBJ_68 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
			};
			name = Debug;
		};
		OBJ_69 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
			};
			name = Release;
		};
		OBJ_73 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
				CLANG_ENABLE_MODULES = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Zip/minizip/include",
					"$(SRCROOT)/Zip/zlib",
				);
				INFOPLIST_FILE = Zip.xcodeproj/ZipTests_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @loader_path/../Frameworks @loader_path/Frameworks";
				OTHER_CFLAGS = "$(inherited)";
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-lz",
				);
				OTHER_SWIFT_FLAGS = "$(inherited)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "$(inherited)";
				SWIFT_VERSION = 4.2;
				TARGET_NAME = ZipTests;
			};
			name = Debug;
		};
		OBJ_74 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
				CLANG_ENABLE_MODULES = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Zip/minizip/include",
					"$(SRCROOT)/Zip/zlib",
				);
				INFOPLIST_FILE = Zip.xcodeproj/ZipTests_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @loader_path/../Frameworks @loader_path/Frameworks";
				OTHER_CFLAGS = "$(inherited)";
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-lz",
				);
				OTHER_SWIFT_FLAGS = "$(inherited)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "$(inherited)";
				SWIFT_VERSION = 4.2;
				TARGET_NAME = ZipTests;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		OBJ_2 /* Build configuration list for PBXProject "Zip" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_3 /* Debug */,
				OBJ_4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		OBJ_35 /* Build configuration list for PBXNativeTarget "Minizip" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_36 /* Debug */,
				OBJ_37 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		OBJ_50 /* Build configuration list for PBXNativeTarget "Zip" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_51 /* Debug */,
				OBJ_52 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		OBJ_61 /* Build configuration list for PBXNativeTarget "ZipPackageDescription" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_62 /* Debug */,
				OBJ_63 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		OBJ_67 /* Build configuration list for PBXAggregateTarget "ZipPackageTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_68 /* Debug */,
				OBJ_69 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		OBJ_72 /* Build configuration list for PBXNativeTarget "ZipTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_73 /* Debug */,
				OBJ_74 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = OBJ_1 /* Project object */;
}
